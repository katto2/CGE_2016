{
    "contents" : "######### Part A. preparation\n#(i)load GHG data\n#GHG_IO=read.csv(file=\"GHGIO.csv\",header=T, as.is=T)\n#GHG_IO[is.na(GHG_IO)]=0\n#GHG_IO_ind=GHG_IO[,colnames(GHG_IO)!=\"HE\"]\n#GHG_IO_F=GHG_IO[,colnames(GHG_IO)==\"HE\"]\n\nGHG_IO_ind=read.csv(file=\"GIO_2010.csv\",header=T,as.is=T)\nGHG_IO_ind[,1]=as.numeric(substr(GHG_IO_ind[,1],2,nchar(GHG_IO_ind[,1])))\ncolnames(GHG_IO_ind)[1]=\"sector\"\nG_fd=read.csv(file=\"GIO_FD_2010.csv\",header=T,as.is=T)\nGHG_IO_F=G_fd[,colnames(G_fd)==\"Final_Pc\"]\n\n#load index mapping\nsector_ind=read.csv(file=\"indcode_auto.csv\",header=T, as.is=T)\n\n#(ii)preparing index\nrow_ind=sector_ind[,1:2]\ncol_ind=sector_ind[,3:4]\nsec_group=sector_ind[,5:8]\nsec_Auto=sector_ind[,c(5,6,15,16)]\n\nIOind_model=row_ind[(1:384),]\nsec_group=sec_group[!is.na(sec_group[,1]),]\nsec_Auto=sec_Auto[!is.na(sec_Auto[,1]),]\n\n##(iii) preparing sector numbers\nnsector=dim(sec_group)[1]\nngroup=length(unique(sec_group[,3]))\nnAuto=length(unique(sec_Auto[,3]))\n\n## (iv) sector dictionary\nsec_dict=sec_group[,1:2]\ngroup_dict=unique(sec_group[,3:4])\nAuto_dict=unique(sec_Auto[,3:4])\n\n###### Part B. GHG_ind\n### I. IO to model\n## Step 1. get dimmension of IO\ndim_GHG_IO_ind=dim(GHG_IO_ind)\n\n## Step 2. Rowsum:  merge and obtain rowsum using aggregate function\nGHG_sec=merge(GHG_IO_ind,IOind_model, by.x=\"sector\", by.y=\"basecode_row\", all.x=T)\nGHG_row_36=aggregate(GHG_sec[,2:(dim_GHG_IO_ind[2])],list(GHG_sec$sector_row),FUN=sum)\n\n## Step 3. Colsum: transpose rowsum, merge with IOind_model index matching, take rowsum using aggregate function\n#3-1. keep row index\nrowindex_36=GHG_row_36[,1]\n#3-2. transpose\nT_GHG_36=data.frame(t(GHG_row_36))\nT_GHG_36=T_GHG_36[-1,]\nT_GHG_36$xsec=rownames(T_GHG_36)#preparing merging index\n\n#3-3. merge\nIOind_model$xsec=paste(\"X\",IOind_model[,1],sep=\"\")\nT_GHG_36_name=merge(T_GHG_36,IOind_model,by=\"xsec\",all.x=T,sort=F)\n\n#3-4. aggregate\n\nGHG_36_0=aggregate(T_GHG_36_name[,2:(dim(T_GHG_36)[2]-1+1)],list(T_GHG_36_name$sector_row),FUN=sum)\nGHG_36_0=data.frame(t(GHG_36_0))\n\n## Step 4. set index for model IO\ncolindex_GHG_36=as.numeric(GHG_36_0[\"Group.1\",])\nrowindex_GHG_36=rowindex_36\n\n## Step 5.  keep only numeric values and transpose\nGHG_36_Ind=(GHG_36_0[-1,])\n## Step 6. Add row and column names\ncolnames(GHG_36_Ind)=sec_dict[colindex_GHG_36,2]\nrownames(GHG_36_Ind)=sec_dict[rowindex_GHG_36,2]\n## (After lunch)\n### II. model to Auto\n\n## Step 1. get dimmension of IO\n\ndim_GHG_36_Ind=dim(GHG_36_Ind)\n\n## Step 2. merge with group index and aggregate by group index\nGHG_36_Auto=GHG_36_Ind\nGHG_36_Auto$secname=rownames(GHG_36_Auto)\nGHG_36_Autoname=merge(GHG_36_Auto, sec_Auto, by.x=\"secname\", by.y=\"sector_name\", all.x=T,sort=F)\nGHG_row_Auto=aggregate(GHG_36_Autoname[,(2:(dim_GHG_36_Ind[2]+1))],list(GHG_36_Autoname$Auto_ind),FUN=sum)\n\n## Step 3. Colsum: transpose rowsum, merge with model_Auto index matching, take rowsum using aggregate function\n#3-1. keep row index\nrowindex_Auto=GHG_row_Auto$Group.1\n#3-2. Transpose\nT_GHG_Auto=data.frame(t(GHG_row_Auto))\nT_GHG_Auto=T_GHG_Auto[-1,]\nT_GHG_Auto$sec=rownames(T_GHG_Auto)\n\n#3-3,merge with sec_Auto index\n\nT_GHG_Auto_name=merge(T_GHG_Auto,sec_Auto,by.x=\"sec\", by.y=\"sector_name\",all.x=T,sort=F)\n\n#3-4. aggregate\n\nGHG_Auto_0=aggregate(T_GHG_Auto_name[,2:(length(rowindex_Auto)+1)],list(T_GHG_Auto_name$Auto_ind),FUN=sum)\nGHG_Auto_0=data.frame(t(GHG_Auto_0))\n\n## step 4. Obtain Auto IO \n#4-1. row and column name index\ncolindex_Auto=as.numeric(GHG_Auto_0[\"Group.1\",])\nrowindex_Auto=as.numeric(rowindex_Auto)\n\n#4-2. keep data\nGHG_Auto_ind=GHG_Auto_0[-1,]\n\n#4-3 add names\n\ncolnames(GHG_Auto_ind)=Auto_dict[colindex_Auto,2]\nrownames(GHG_Auto_ind)=Auto_dict[rowindex_Auto,2]\n\n### III. model to Group\n\n## Step 1. get dimmension of IO\n\ndim_GHG_36_Ind=dim(GHG_36_Ind)\n\n## Step 2. merge with group index and aggregate by group index\nGHG_36_GR=GHG_36_Ind\nGHG_36_GR$secname=rownames(GHG_36_GR)\nGHG_36_GRname=merge(GHG_36_GR, sec_group, by.x=\"secname\", by.y=\"sector_name\", all.x=T,sort=F)\nGHG_row_GR=aggregate(GHG_36_GRname[,(2:(dim_GHG_36_Ind[2]+1))],list(GHG_36_GRname$Group_ind),FUN=sum)\n\n## Step 3. Colsum: transpose rowsum, merge with model_Auto index matching, take rowsum using aggregate function\n#3-1. keep row index\nrowindex_GR=GHG_row_GR$Group.1\n#3-2. Transpose\nT_GHG_GR=data.frame(t(GHG_row_GR))\nT_GHG_GR=T_GHG_GR[-1,]\nT_GHG_GR$sec=rownames(T_GHG_GR)\n\n#3-3,merge with sec_GR index\n\nT_GHG_GR_name=merge(T_GHG_GR,sec_group,by.x=\"sec\", by.y=\"sector_name\",all.x=T,sort=F)\n\n#3-4. aggregate\n\nGHG_GR_0=aggregate(T_GHG_GR_name[,2:(length(rowindex_GR)+1)],list(T_GHG_GR_name$Group_ind),FUN=sum)\nGHG_GR_0=data.frame(t(GHG_GR_0))\n\n## step 4. Obtain Auto IO \n#4-1. row and column name index\ncolindex_GR=as.numeric(GHG_GR_0[\"Group.1\",])\nrowindex_GR=as.numeric(rowindex_GR)\n\n#4-2. keep data\nGHG_GR_ind=GHG_GR_0[-1,]\n\n#4-3 add names\n\ncolnames(GHG_GR_ind)=group_dict[colindex_GR,2]\nrownames(GHG_GR_ind)=group_dict[rowindex_GR,2]\n\n\n###### Part D. GHG_F\n\n## (i) data preparation\nGHG_IO_F=data.frame(cbind(GHG_IO_ind$sector,GHG_IO_F))\ncolnames(GHG_IO_F)=c(\"sector\",\"HE\")\n\n##(ii) model GHG_F\n# step 1. merge with model ind\nGHG_F_model=merge(GHG_IO_F,IOind_model, by.x=\"sector\", by.y=\"basecode_row\",all.x=T,sort=F)\n\n# step 2. aggregate by \"sector_row(model variable)\"\n\nGHG_F_model=data.frame(aggregate(GHG_F_model[,\"HE\"],list(GHG_F_model[,\"sector_row\"]),FUN=sum))\n\n# step 3. obtain model F \nrownames(GHG_F_model)=sec_dict[GHG_F_model[,\"Group.1\"],2]\ncolnames(GHG_F_model)=c(\"model_ind\", \"HE\")\n\n\n##(iii) Auto GHG_F\n#step 1. merge with Auto ind\n\nGHG_F_Auto=merge(GHG_F_model, sec_Auto, by.x=\"model_ind\", by.y=\"sector_ind\", all.x=T, sort=F)\n\n\n# step 2. aggregate by \"Auto_ind(Auto variable)\"\n\n\nGHG_F_Auto=data.frame(aggregate((GHG_F_Auto[,\"HE\"]),list(GHG_F_Auto[,\"Auto_ind\"]),FUN=sum))\n\n# step 3. obtain Auto F \nrownames(GHG_F_Auto)=Auto_dict[GHG_F_Auto[,\"Group.1\"],2]\ncolnames(GHG_F_Auto)=c(\"Auto_ind\", \"HE\")\n\n\n##(iv) group GHG_F\n#step 1. merge with GR ind\n\nGHG_F_GR=merge(GHG_F_model, sec_group, by.x=\"model_ind\", by.y=\"sector_ind\", all.x=T, sort=F)\n\n\n# step 2. aggregate by \"Group_ind(Group variable)\"\n\n\nGHG_F_GR=data.frame(aggregate((GHG_F_GR[,\"HE\"]),list(GHG_F_GR[,\"Group_ind\"]),FUN=sum))\n\n# step 3. obtain Auto F \nrownames(GHG_F_GR)=group_dict[GHG_F_GR[,\"Group.1\"],2]\ncolnames(GHG_F_GR)=c(\"Group_ind\", \"HE\")\n\n\n############### Part D. merge IND and F\nGHG_36_Ind$rowindex=rownames(GHG_36_Ind)\nGHG_F_model$rowindex=rownames(GHG_F_model)\nGHG_F_model=GHG_F_model[-1]\nGHG_model=merge(GHG_36_Ind,GHG_F_model, by=\"rowindex\",all=T,sort=F)\nrownames(GHG_model)=GHG_model$rowindex\nGHG_model=GHG_model[,-1]\n\nGHG_Auto_ind$rowindex=rownames(GHG_Auto_ind)\nGHG_F_Auto$rowindex=rownames(GHG_F_Auto)\nGHG_F_Auto=GHG_F_Auto[,-1]\nGHG_Auto=merge(GHG_Auto_ind,GHG_F_Auto,by=\"rowindex\",all=T,sort=F)\nrownames(GHG_Auto)=GHG_Auto$rowindex\nGHG_Auto=GHG_Auto[,-1]\n\nGHG_GR_ind$rowindex=rownames(GHG_GR_ind)\nGHG_F_GR$rowindex=rownames(GHG_F_GR)\nGHG_F_GR=GHG_F_GR[,-1]\nGHG_GR=merge(GHG_GR_ind,GHG_F_GR,by=\"rowindex\",all=T,sort=F)\nrownames(GHG_GR)=GHG_GR$rowindex\nGHG_GR=GHG_GR[,-1]\n\n############### Part E. add total\n\nGHG_model=rbind(GHG_model,colSums(GHG_model))\nGHG_Auto=rbind(GHG_Auto,colSums(GHG_Auto))\nGHG_GR=rbind(GHG_GR,colSums(GHG_GR))\n\nGHG_model=cbind(GHG_model,rowSums(GHG_model))\nGHG_Auto=cbind(GHG_Auto,rowSums(GHG_Auto))\nGHG_GR=cbind(GHG_GR,rowSums(GHG_GR))\n\nrownames(GHG_model)[dim(GHG_model)[1]]=\"Total\"\nrownames(GHG_Auto)[dim(GHG_Auto)[1]]=\"Total\"\nrownames(GHG_GR)[dim(GHG_GR)[1]]=\"Total\"\n\nwrite.csv(GHG_model, file=\"GHG_model.csv\")\nwrite.csv(GHG_Auto,file=\"GHG_Auto.csv\")\nwrite.csv(GHG_GR,file=\"GHG_GR.csv\")\n\n############### Part F. reduce size and add process\nGHG_model_p=GHG_model/100000 # in 100,000 ton\nGHG_Auto_p=GHG_Auto/100000\nGHG_GR_p=GHG_GR/100000\n\nghg_process=c(307.6473,1.4663,1.7777) # 2015 NIR report p.402\nghg_process_ind=c(\"Cement\",\"Orgchem\",\"IS\")\nghg_process_model=data.frame(GHG_model_p[\"Total\",])\ncolnames(ghg_process_model)=colnames(GHG_model_p)\nrownames(ghg_process_model)=\"process\"\nghg_process_model[1,]=0\nghg_process_model[,match(ghg_process_ind,colnames(ghg_process_model))]=t(ghg_process)\n\nGHG_model_p=rbind(GHG_model_p[-dim(GHG_model_p)[1],],ghg_process_model)\nGHG_model_p[,dim(GHG_model_p)[2]]=rowSums(GHG_model_p[,(1:(dim(GHG_model_p)[2]-1))])\nmodel_total_p=colSums(GHG_model_p)\nGHG_model_p=rbind(GHG_model_p,t(data.frame(model_total_p)))\nrownames(GHG_model_p)[dim(GHG_model_p)[1]]=\"Total\"\n\nghg_process_Auto=data.frame(GHG_Auto_p[\"Total\",])\ncolnames(ghg_process_Auto)=colnames(GHG_Auto_p)\nrownames(ghg_process_Auto)=\"process\"\nghg_process_Auto[1,]=0\nghg_process_Auto[,\"ENIT\"]=sum(ghg_process)\n\nGHG_Auto_p=rbind(GHG_Auto_p[-(dim(GHG_Auto_p)[1]),],ghg_process_Auto)\nGHG_Auto_p[,dim(GHG_Auto_p)[2]]=rowSums(GHG_Auto_p[,(1:(dim(GHG_Auto_p)[2]-1))])\nAuto_total_p=colSums(GHG_Auto_p)\nGHG_Auto_p=rbind(GHG_Auto_p,t(data.frame(Auto_total_p)))\nrownames(GHG_Auto_p)[dim(GHG_Auto_p)[1]]=\"Total\"\n\nghg_process_GR=data.frame(GHG_GR_p[\"Total\",])\ncolnames(ghg_process_GR)=colnames(GHG_GR_p)\nrownames(ghg_process_GR)=\"process\"\nghg_process_GR[1,]=0\nghg_process_GR[,\"Ind\"]=sum(ghg_process)\n\nGHG_GR_p=rbind(GHG_GR_p[-(dim(GHG_GR_p)[1]),],ghg_process_GR)\nGHG_GR_p[,dim(GHG_GR_p)[2]]=rowSums(GHG_GR_p[,(1:(dim(GHG_GR_p)[2]-1))])\nGR_total_p=colSums(GHG_GR_p)\nGHG_GR_p=rbind(GHG_GR_p,t(data.frame(GR_total_p)))\nrownames(GHG_GR_p)[dim(GHG_GR_p)[1]]=\"Total\"\n\ncolnames(GHG_model_p)[dim(GHG_model_p)[2]]=\"Total\"\ncolnames(GHG_Auto_p)[dim(GHG_Auto_p)[2]]=\"Total\"\ncolnames(GHG_GR_p)[dim(GHG_GR_p)[2]]=\"Total\"\n\n## change names used in GAMS coding: adding -a for activity, -c for commodity##\ncolnames(GHG_model_p)[1:nsector]=paste(colnames(GHG_model_p)[1:nsector],\"-a\",sep=\"\")\nNon_ind_r_model=is.na(match(rownames(GHG_model_p),c(\"process\",\"Total\")))\nrownames(GHG_model_p)[Non_ind_r_model]=paste(rownames(GHG_model_p)[Non_ind_r_model],\"-c\",sep=\"\")\n\ncolnames(GHG_Auto_p)[1:nAuto]=paste(colnames(GHG_Auto_p)[1:nAuto],\"-a\",sep=\"\")\nNon_ind_r_Auto=is.na(match(rownames(GHG_Auto_p),c(\"process\",\"Total\")))\nrownames(GHG_Auto_p)[Non_ind_r_Auto]=paste(rownames(GHG_Auto_p)[Non_ind_r_Auto],\"-c\",sep=\"\")\n\ncolnames(GHG_GR_p)[1:ngroup]=paste(colnames(GHG_GR_p)[1:ngroup],\"-a\",sep=\"\")\nNon_ind_r_GR=is.na(match(rownames(GHG_GR_p),c(\"process\",\"Total\")))\nrownames(GHG_GR_p)[Non_ind_r_GR]=paste(rownames(GHG_GR_p)[Non_ind_r_GR],\"-c\",sep=\"\")\n\n## change column name HE to houseold\n\n\ncolnames(GHG_model_p)[which(colnames(GHG_model_p)==\"HE\")]=\"Household\"\ncolnames(GHG_Auto_p)[which(colnames(GHG_Auto_p)==\"HE\")]=\"Household\"\ncolnames(GHG_GR_p)[which(colnames(GHG_GR_p)==\"HE\")]=\"Household\"\n\n## drop records without emission\n#GHG_Auto_p=GHG_model_p[GHG_Auto_p$Total!=0,]\nGHG_model_p=GHG_model_p[GHG_model_p$Total!=0,]\nGHG_Auto_p=GHG_Auto_p[GHG_Auto_p$Total!=0,]\nGHG_GR_p=GHG_GR_p[GHG_GR_p$Total!=0,]\n\n\nwrite.csv(GHG_model_p, file=\"GHG_model_p.csv\")\nwrite.csv(GHG_Auto_p,file=\"GHG_Auto_p.csv\")\nwrite.csv(GHG_GR_p,file=\"GHG_GR_p.csv\")\n",
    "created" : 1459994209342.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1414791491",
    "id" : "85249A98",
    "lastKnownWriteTime" : 1461201722,
    "path" : "C:/Users/sungw/OneDrive/work_2016/Cleancar_2nd/Yr_2016/CGE/SAM/agg_ghg_auto_2016.r",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}
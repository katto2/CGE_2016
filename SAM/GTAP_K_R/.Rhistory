check_82=XP_0_82_est-colSums(A_T_N_82_est)-colSums(V_N_82_est)-XPB_resin
print ("max (abs(Total output_est-Total input_est)) in 82 industries")
print (max(abs(check_82)))
max(abs(A_T_N_82_est-A_T_N_82))
max(abs(F_T_N_82_est-F_T_N_82))
max(abs(A_D_N_82_est-A_D_N_82))
max(abs(F_D_N_82_est-F_D_N_82))
max(abs(A_M_N_82_est-A_M_N_82))
max(abs(F_M_N_82_est-F_M_N_82))
source('D:/GTAPK_R/Agg/NIO_Est.r')
t=2010
G_name2=paste(paste("IO_E_G2",t,sep="_"),"Rdata",sep=".")
GDPDF=data.frame(c(100, 101.6, 102.6))
rownames(GDPDF)=c(2010:2012)
colnames(GDPDF)="Deflator"
CR_2011=(1101.84+1114.14)/2 #mean over Fist half average and Secon half average
CR=data.frame(rep(CR_2011,3))
rownames(CR)=(2010:2012)
colnames(CR)="one-dollar EX"
load(G_name2)
G_name2=paste(paste("IO_E_G2",t,sep="_"),"Rdata",sep=".")
load(G_name2)
t=2010
G_name2=paste(paste("IO_E_G2",t,sep="_"),"Rdata",sep=".")
load(G_name2)
V_B_82
V_B_384
Indmatch=read.csv(file=file.path("Agg/IOT","IO_index.csv"), header=T,as.is=T)
View(Indmatch)
colnames(Indmatch)
Indmatch=Indmatch[,c("basecode","m_code")]
View(Indmatch)
colnames(V_N_384_est)
### This file replaces cal_IOT_KSW.gms, which creats Producers' price IO using basic price IO.
### From 2011, Bank of Korea only publishes basic price IO annually. But,the producers' price IO will be published for every five years (base year) only.
### Since we need producers' price IO, we will estimate one using basic price IO and the relationship between base price IO and producers' price IO in base year.
### For example, A_T_N_est=A_T_B/R_T_N(base). R_T_N(base)=1+(A_T_B(base)-A_T_N(base))/(A_T_N(base))
### All operations are done using 384 industry files
### Specifically, the estimation is done in following steps
#(1) Obtain ratio coefficeints
##(1-i) load base year data
tb=2010
D_name1=paste(paste("D1",tb,sep="_"),"Rdata",sep=".")
load(D_name1)
## 384 industries
#(1-ii) VA ratio: R_V_N=(V_B-V_N)/V_N,
## if V_B(ij)=0 and V_N(ij)!=0, then we cannot V_N b/c V_B is zero
R_V_N_384=(V_B_384[c("labor","surplus","dep","PTAXetc"),]-V_N_384[c("labor","surplus","dep","PTAXetc"),])/V_N_384[c("labor","surplus","dep","PTAXetc"),]
R_V_N_384[is.na(R_V_N_384)]=0
#(1-iii) A_M_N and F_M_N ratio. (A_M_B-A_M_N/A_M_N), (F_M_B-F_M_N)/F_M_N)
R_MFTAX_K_384=(A_M_B_384-A_M_N_384)/A_M_N_384
R_MFTAX_K_384[is.na(R_MFTAX_K_384)]=0
R_MFCTAX_K_384=(F_M_B_384-F_M_N_384)/F_M_N_384
R_MFCTAX_K_384[is.na(R_MFCTAX_K_384)]=0
#(1-vi) A_D_N and F_D_N ratio. (A_D_B-A_D_N/A_D_N)),(F_D_B-F_D_N/F_D_N)
DFTAX_K_384=A_D_B_384-A_D_N_384
DFCTAX_K_384=F_D_B_384-F_D_N_384
R_DFTAX_K_384=DFTAX_K_384/A_D_N_384
R_DFTAX_K_384[is.na(R_DFTAX_K_384)]=0
R_DFCTAX_K_384=DFCTAX_K_384/F_D_N_384
R_DFCTAX_K_384[is.na(R_DFCTAX_K_384)]=0
## 82 industries
#(1-ii) VA ratio: R_V_N=(V_B-V_N)/V_N,
## if V_B(ij)=0 and V_N(ij)!=0, then we cannot V_N b/c V_B is zero
R_V_N_82=(V_B_82[c("labor","surplus","dep","PTAXetc"),]-V_N_82[c("labor","surplus","dep","PTAXetc"),])/V_N_82[c("labor","surplus","dep","PTAXetc"),]
R_V_N_82[is.na(R_V_N_82)]=0
#(1-iii) A_M_N and F_M_N ratio. (A_M_B-A_M_N/A_M_N), (F_M_B-F_M_N)/F_M_N)
R_MFTAX_K_82=(A_M_B_82-A_M_N_82)/A_M_N_82
R_MFTAX_K_82[is.na(R_MFTAX_K_82)]=0
R_MFCTAX_K_82=(F_M_B_82-F_M_N_82)/F_M_N_82
R_MFCTAX_K_82[is.na(R_MFCTAX_K_82)]=0
#(1-vi) A_D_N and F_D_N ratio. (A_D_B-A_D_N/A_D_N)),(F_D_B-F_D_N/F_D_N)
DFTAX_K_82=A_D_B_82-A_D_N_82
DFCTAX_K_82=F_D_B_82-F_D_N_82
R_DFTAX_K_82=DFTAX_K_82/A_D_N_82
R_DFTAX_K_82[is.na(R_DFTAX_K_82)]=0
R_DFCTAX_K_82=DFCTAX_K_82/F_D_N_82
R_DFCTAX_K_82[is.na(R_DFCTAX_K_82)]=0
#(2) save ratio coefficients
R_name=paste(paste("R_est",tb,sep="_"),"Rdata",sep=".")
R_384_names=c("R_V_N_384", "R_MFTAX_K_384", "R_MFCTAX_K_384", "R_DFTAX_K_384", "R_DFCTAX_K_384")
R_82_names=c("R_V_N_82", "R_MFTAX_K_82", "R_MFCTAX_K_82", "R_DFTAX_K_82", "R_DFCTAX_K_82")
save(list=c(R_384_names,R_82_names),file=file.path("Agg/IOT",R_name))
#(3) clear memory and load relevent data
rm(list=ls())
t=2010
D_name_t=paste(paste("D1",t,sep="_"),"Rdata",sep=".")
load(D_name_t)
load(file.path("Agg/IOT","R_est_2010.Rdata"))
#(4) Obtain Estimated producers' price IO in 384 industries
##(4-i) VA
V_N_384_est=V_B_384[c("labor","surplus","dep","PTAXetc"),]/(1+R_V_N_384)
V_N_384_est[is.na(V_N_384_est)]=0 # if R_V_N is -1. then V_N_384_est has NaN. R_V_N=-1 => V_B=0, then we set V_N_384_est as zero.
PTAXin_384_est=t(data.frame(rep(0,dim(V_N_384_est)[2])))## PTAXin in V_N (producers' price) is always zero.
colnames(PTAXin_384_est)=colnames(V_N_384_est)
rownames(PTAXin_384_est)="PTAXin"
V_N_384_est=rbind(PTAXin_384_est,V_N_384_est)
##(4-ii) A_M_N, F_M_N
A_M_N_384_est=A_M_B_384/(1+R_MFTAX_K_384)
# if R_MFTAX_K=-1 then A_M_N_384_est has NaN. this happens when A_M_B=0 , A_M_N!=0. We cannot recover this value b/c A_M_B=0. So we set this value as zero
A_M_N_384_est[is.na(A_M_N_384_est)]=0
F_M_N_384_est=F_M_B_384/(1+R_MFCTAX_K_384)
##(4-iii) A_D_N, F_D_N
F_D_N_384_est=F_D_B_384/(1+R_DFCTAX_K_384)
F_D_N_384_est[,"Final_Ex"]=F_D_B_384[,"Final_Ex"]
F_D_N_384_est[,"Final_Tot"]=rowSums(F_D_N_384_est[,c(Fin_DD,Fin_DX)])
A_D_N_384_est=A_D_B_384/(1+R_DFTAX_K_384)
#(4-iv) A_T_N and F_T_N. A_T_N=A_D_B+A_M_B, F_T_N=F_T_B+F_M_B
F_T_N_384_est=F_D_N_384_est+F_M_N_384_est
A_T_N_384_est=A_D_N_384_est+A_M_N_384_est
#(5) generate XP matching total input residual adjustment Total output = Total input + cost saved by scrap (resin)
## Notice that Domestic Demand = Total output + Scrap supply = Total input + Cost saved by scrap + Scrap supply
cal_FD=colSums(V_N_384_est)+colSums(A_T_N_384_est)+resin_b0-(rowSums(A_D_N_384_est)+F_D_N_384_est[,"Final_Tot"]-resout_b0)
F_D_N_384_est[,"Final_St"]=cal_FD+F_D_N_384_est[,"Final_St"]
F_D_N_384_est[,"Final_Tot"]=rowSums(F_D_N_384_est[,c(Fin_DD,Fin_DX)])
F_M_N_384_est[,"Final_Tot"]=rowSums(F_M_N_384_est[,Fin_DD])
F_T_N_384_est=F_D_N_384_est+F_M_N_384_est
XP_0_384_est=rowSums(A_D_N_384_est)+F_D_N_384_est[,"Final_Tot"]-resout_b0 #Total Domestic Demand-Scrap supply =Total Output
check_384=XP_0_384_est-colSums(A_T_N_384_est)-colSums(V_N_384_est)-resin_b0
print ("max (abs(Total output_est-Total input_est)) in 384 industries")
print (max(abs(check_384)))
#(5) Obtain Estimated producers' price IO in 82 industries
##(4-i) VA
V_N_82_est=V_B_82[c("labor","surplus","dep","PTAXetc"),]/(1+R_V_N_82)
V_N_82_est[is.na(V_N_82_est)]=0 # if R_V_N is -1. then V_N_82_est has NaN. R_V_N=-1 => V_B=0, then we set V_N_82_est as zero.
PTAXin_82_est=t(data.frame(rep(0,dim(V_N_82_est)[2])))## PTAXin in V_N (producers' price) is always zero.
colnames(PTAXin_82_est)=colnames(V_N_82_est)
rownames(PTAXin_82_est)="PTAXin"
V_N_82_est=rbind(PTAXin_82_est,V_N_82_est)
##(4-ii) A_M_N, F_M_N
A_M_N_82_est=A_M_B_82/(1+R_MFTAX_K_82)
# if R_MFTAX_K=-1 then A_M_N_82_est has NaN. this happens when A_M_B=0 , A_M_N!=0. We cannot recover this value b/c A_M_B=0. So we set this value as zero
A_M_N_82_est[is.na(A_M_N_82_est)]=0
F_M_N_82_est=F_M_B_82/(1+R_MFCTAX_K_82)
##(4-iii) A_D_N, F_D_N
F_D_N_82_est=F_D_B_82/(1+R_DFCTAX_K_82)
F_D_N_82_est[,"Final_Ex"]=F_D_B_82[,"Final_Ex"]
F_D_N_82_est[,"Final_Tot"]=rowSums(F_D_N_82_est[,c(Fin_DD,Fin_DX)])
A_D_N_82_est=A_D_B_82/(1+R_DFTAX_K_82)
#(4-iv) A_T_N and F_T_N. A_T_N=A_D_B+A_M_B, F_T_N=F_T_B+F_M_B
F_T_N_82_est=F_D_N_82_est+F_M_N_82_est
A_T_N_82_est=A_D_N_82_est+A_M_N_82_est
#(5_A) Obtain Estimated producers' price IO in 82 industries by aggregating A, F, V in 384 industries.
#(5-A-1) load industry matching
Indmatch=read.csv(file=file.path("Agg/IOT","IO_index.csv"), header=T,as.is=T)
Indmatch=Indmatch[,c("basecode","m_code")]
#(5-A-2) VA aggregation
#(5) generate XP matching total input residual adjustment Total output = Total input + cost saved by scrap (resin)
## Notice that Domestic Demand = Total output + Scrap supply = Total input + Cost saved by scrap + Scrap supply
cal_FD_82=colSums(V_N_82_est)+colSums(A_T_N_82_est)+XPB_resin-(rowSums(A_D_N_82_est)+F_D_N_82_est[,"Final_Tot"]-XPB_resout)
F_D_N_82_est[,"Final_St"]=cal_FD_82+F_D_N_82_est[,"Final_St"]
F_D_N_82_est[,"Final_Tot"]=rowSums(F_D_N_82_est[,c(Fin_DD,Fin_DX)])
F_M_N_82_est[,"Final_Tot"]=rowSums(F_M_N_82_est[,Fin_DD])
F_T_N_82_est=F_D_N_82_est+F_M_N_82_est
XP_0_82_est=rowSums(A_D_N_82_est)+F_D_N_82_est[,"Final_Tot"]-XPB_resout #Total Domestic Demand-Scrap supply =Total Output
check_82=XP_0_82_est-colSums(A_T_N_82_est)-colSums(V_N_82_est)-XPB_resin
print ("max (abs(Total output_est-Total input_est)) in 82 industries")
print (max(abs(check_82)))
colnames(V_N_384_est)
t_V_N_384_est=t(V_N_384_est)
colnames(t_V_N_384_est)
rownames(t_V_N_384_est)
colnames(Indmatch)
Indmatch$X=paste("X",Indmatch$basecode,sep="")
Indmatch$X
colnames(t_V_N_384_est)
t_V_N_384_est$X=rownames(t_V_N_384_est)
dim(t_V_N_384_est)
str(t_V_N_384_est)
head(t_V_N_384_est)
t_V_N_384_est=t(V_N_384_est)
str(t_V_N_384)
str(t_V_N_384_est)
V_N_384_est
t(V_N_384_est)
T_V_N_384_est=t(V_N_384_est)
str(T_V_N_384_est)
T_V_N_384_est$X=rownames(T_V_N_384_est)
T_V_N_384_est=t(V_N_384_est)
dim(T_V_N_384_est)
rownames(T_V_N_384_est)
str(rownames(T_V_N_384_est))
Xind=rownames(T_V_N_384_est)
T_V_N_384_est$X=t(Xind)
str(T_V_N_384_est)
T_V_N_384_est=t(V_N_384_est)
str(T_V_N_384_est)
T_V_N_384_est$X=paste("X",(1:384),sep="")
T_V_N_384_est=data.frame(t(V_N_384_est))
str(T_V_N_384_est)
T_V_N_384_est$X=rownames(T_V_N_384_est)
str(T_V_N_384_est)
Indmatch=read.csv(file=file.path("Agg/IOT","IO_index.csv"), header=T,as.is=T)
Indmatch=Indmatch[,c("basecode","m_code")]
Indmatch$X=paste("X",Indmatch$basecode,sep="")
T_V_N_384_est=data.frame(t(V_N_384_est))
T_V_N_384_est$X=rownames(T_V_N_384_est)
merge(T_V_N_384_est,Indmatch, by="X", all=T)
merge(T_V_N_384_est,Indmatch, by="X", all=T, sort=F)
aggregate(T_V_N_est_m,list(T_V_N_est_m$m_code),FUN=sum)
T_V_N_est_m=merge(T_V_N_384_est,Indmatch, by="X", all=T, sort=F)
T_V_N_est_82=aggregate(T_V_N_est_m,list(T_V_N_est_m$m_code),FUN=sum)
aggregate(T_V_N_est_m[,c(2:5)],list(T_V_N_est_m$m_code),FUN=sum)
aggregate(T_V_N_est_m[,c(2:6)],list(T_V_N_est_m$m_code),FUN=sum)
data.frame(t(T_V_N_est_82))
T_V_N_est_82=aggregate(T_V_N_est_m[,c(2:6)],list(T_V_N_est_m$m_code),FUN=sum)
data.frame(t(T_V_N_est_82))
V_N_est_82_m[-1,]
V_N_est_82_m=data.frame(t(T_V_N_est_82))
V_N_est_82_m[-1,]
V_N_est_82_m=V_N_est_82_m[-1,]
max(abs(V_N_est_82_m-V_N_82_est))
rownames(F_D_N_384_est)
colnames(F_D_N_384_est)
F_D_N_384_est$X=paste("X",rownames(F_D_N_384_est),sep="")
head(F_D_N_384)
head(F_D_N_384_est)
merge(F_D_N_384_est,Indmatch,by="X",all=T,sort=F)
aggregate(F_D_N_est_m[,(2:9)],list(F_D_N_est_m$m_code),FUN=sum)
F_D_N_est_m=merge(F_D_N_384_est,Indmatch,by="X",all=T,sort=F)
aggregate(F_D_N_est_m[,(2:9)],list(F_D_N_est_m$m_code),FUN=sum)
data.frame(aggregate(F_D_N_est_m[,(2:9)],list(F_D_N_est_m$m_code),FUN=sum))
str(F_D_N_est_82_m)
F_D_N_est_82_m=data.frame(aggregate(F_D_N_est_m[,(2:9)],list(F_D_N_est_m$m_code),FUN=sum))
str(F_D_N_est_82_m)
str(F_D_N_82)
str(V_N_est_82_m)
F_D_N_est_82_m=F_D_N_est_82_m[,-1] # Industry index used for merging is dropped
max(abs(F_D_N_est_82_m-F_D_N_82))
sort(abs(F_D_N_est_82_m-F_D_N_82)[,1])
colSums(abs(F_D_N_est_82_m-F_D_N_82))
max(abs(F_D_N_est_82_m-F_D_N_82_est))
str(F_M_N_384)
rownames(F_M_N_384)
F_M_N_384_est$X=paste("X",rownames(F_M_N_384_est),sep="")
F_M_N_est_m=merge(F_M_N_384_est,Indmatch,by="X",all=T,sort=F)
head(F_M_N_est_m)
F_M_N_est_82_m=data.frame(aggregate(F_M_N_est_m[,(2:9)],list(F_M_N_est_m$m_code),FUN=sum))
head(F_M_N_est_82_m)
F_M_N_est_82_m=F_M_N_est_82_m[,-1] # Industry index used for merging is dropped
max(abs(F_M_N_est_82_m-F_M_N_82))
str(A_D_N_384_est)
A_D_N_384_est$X=paste("X",rownames(A_D_N_384_est),sep="")
A_D_N_est_m=merge(A_D_N_384_est,Indmatch,by="X",all=T,sort=F)
head(A_D_N_est_m)
dim_ADN=dim(A_D_N_est_m)
dim_ADN
dim_ADN[2]-2
A_D_N_est_m[,(2:(dim_ADN[2]-2))]
head(A_D_N_est_m[,(2:(dim_ADN[2]-2))])
aggregate(A_D_N_est_m[,(2:(dim_ADN[2]-2))],list(A_D_N_est_m$m_code),FUN=sum)
head(aggregate(A_D_N_est_m[,(2:(dim_ADN[2]-2))],list(A_D_N_est_m$m_code),FUN=sum))
dim(aggregate(A_D_N_est_m[,(2:(dim_ADN[2]-2))],list(A_D_N_est_m$m_code),FUN=sum))
A_D_N_est_m_r=data.frame(aggregate(A_D_N_est_m[,(2:(dim_ADN[2]-2))],list(A_D_N_est_m$m_code),FUN=sum))
head(t(A_D_N_est_m_r))
head(data.frame(t(A_D_N_est_m_r)))
T_A_D_N_est[-1,]
T_A_D_N_est_m[-1,]
T_A_D_N_est_m=data.frame(t(A_D_N_est_m_r))
T_A_D_N_est_m[-1,]
head(T_A_D_N_est_m[-1,])
T_A_D_N_est_m=T_A_D_N_est_m[-1,]
head(T_A_D_N_est_m)
str(T_A_D_N_est_m)
rownames(T_A_D_N_est_m)
rownames(T_A_D_N_est_m_r)
A_D_N_384_est$X=paste("X",rownames(A_D_N_384_est),sep="")
A_D_N_est_m=merge(A_D_N_384_est,Indmatch,by="X",all=T,sort=F)
dim_ADN=dim(A_D_N_est_m)
A_D_N_est_m_r=data.frame(aggregate(A_D_N_est_m[,(2:(dim_ADN[2]-2))],list(A_D_N_est_m$m_code),FUN=sum)) #RowSums
T_A_D_N_est_m_r=data.frame(t(A_D_N_est_m_r))
T_A_D_N_est_m_r=T_A_D_N_est_m_r[-1,]
head(T_A_D_N_est_m_r)
rownamse(T_A_D_N_est_m_r)
rownames(T_A_D_N_est_m_r)
T_A_D_N_est_m_r$X=rownames(T_A_D_N_est_m_r)
merge(T_A_D_N_est_m_r,Indmatch,by="X",all=T,sort=F)
T_A_D_N_est_m_c=merge(T_A_D_N_est_m_r,Indmatch,by="X",all=T,sort=F)#merge with 82 industry index
str(T_A_D_N_est_m_c)
head(T_A_D_N_est_m_c)
T_A_D_N_est_m_r=data.frame(t(A_D_N_est_m_r))#transpose
T_A_D_N_est_m_r=T_A_D_N_est_m_r[-1,]
T_A_D_N_est_m_r$X=rownames(T_A_D_N_est_m_r)
T_A_D_N_est_m=merge(T_A_D_N_est_m_r,Indmatch,by="X",all=T,sort=F)#merge with 82 industry index
head(T_A_D_N_est_m)
dim_TADN=dim(T_A_D_N_est_m)
dim_TADN
data.frame(aggregate(T_A_D_N_est_m[,(2:(dim_TADN[2]-2))],list(T_A_D_N_est_m$m_code),FUN=sum))
T_A_D_N_est_m_c=data.frame(aggregate(T_A_D_N_est_m[,(2:(dim_TADN[2]-2))],list(T_A_D_N_est_m$m_code),FUN=sum))
head(T_A_D_N_est_m_c)
str(T_A_D_N_est_m_c)
A_D_N_est_82_m=data.frame(t(T_A_D_N_est_m_c))
str(A_D_N_est_82_m)
A_D_N_est_82_m=A_D_N_est_82_m[-1,]
max(abs(A_D_N_est_82-A_D_N_82))
max(abs(A_D_N_est_82_m-A_D_N_82))
colnames(A_M_N_384_est)
A_M_N_384_est$X=paste("X",rownames(A_M_N_384_est),sep="")
A_M_N_est_m=merge(A_M_N_384_est,Indmatch,by="X",all=T,sort=F)
head(A_M_N_est_m)
dim_AMN=dim(A_M_N_est_m)
A_M_N_est_m_r=data.frame(aggregate(A_M_N_est_m[,(2:(dim_AMN[2]-2))],list(A_M_N_est_m$m_code),FUN=sum)) #RowSums
head(A_M_N_est_m_r)
dim(A_M_N_est_m_r)
head(A_M_N_est_m_r)
T_A_M_N_est_m_r=data.frame(t(A_M_N_est_m_r))#transpose
head(T_A_M_N_est_m_r)
T_A_M_N_est_m_r=T_A_M_N_est_m_r[-1,]
head(T_A_M_N_est_m_r)
T_A_M_N_est_m_r$X=rownames(T_A_M_N_est_m_r)
T_A_M_N_est_m=merge(T_A_M_N_est_m_r,Indmatch,by="X",all=T,sort=F)#merge with 82 industry index
head(T_A_M_N_est_m)
dim_TAMN=dim(T_A_M_N_est_m)
dim_TAMN
T_A_M_N_est_m_c=data.frame(aggregate(T_A_M_N_est_m[,(2:(dim_TAMN[2]-2))],list(T_A_M_N_est_m$m_code),FUN=sum)) #colSums
head(T_A_M_N_est_m_c)
dim(T_A_M_N_est_m_c)
head(T_A_M_N_est_m_c)
A_M_N_est_82_m=data.frame(t(T_A_M_N_est_m_c))
head(A_M_N_est_82_m)
A_M_N_est_82_m=A_M_N_est_82_m[-1,]
max(abs(A_M_N_est_82-A_M_N_82))
max(abs(A_M_N_est_82_m-A_M_N_82))
A_T_N_est_82_m=A_M_N_est_82_m+A_D_N_est_82_m
F_T_N_est_82_m=F_M_N_est_82_m+F_D_N_est_82_m
max(abs(A_T_N_est_82_m-A_T_N_82))
max(abs(F_T_N_est_82_m-F_T_N_82))
cal_FD_82_m=colSums(V_N_est_82_m)+colSums(A_T_N_est_82_m)+XPB_resin-(rowSums(A_D_N_est_82_m)+F_D_N_est_82_m[,"Final_Tot"]-XPB_resout)
cal_FD_82_m
cal_FD_82_m+F_D_N_est_82_m[,"Final_St"]
cal_FD_82_m+F_D_N_est_82_m[,"Final_St"]-F_D_N_est_82_m[,"Final_St"]
rowSums(F_D_N_est_82_m[,c(Fin_DD,Fin_DX)])
rowSums(F_D_N_est_82_m[,c(Fin_DD,Fin_DX)])-F_D_N_est_82_m[,"Final_Tot"]
rowSums(F_M_N_est_82_m[,Fin_DD])
rowSums(F_M_N_est_82_m[,Fin_DD])-F_M_N_est_82_m[,"Final_Tot"]
F_D_N_est_82_m[,"Final_St"]=cal_FD_82_m+F_D_N_est_82_m[,"Final_St"]
F_D_N_est_82_m[,"Final_Tot"]=rowSums(F_D_N_est_82_m[,c(Fin_DD,Fin_DX)])
F_M_N_est_82_m[,"Final_Tot"]=rowSums(F_M_N_est_82_m[,Fin_DD])
F_T_N_est_82_m=F_D_N_est_82_m+F_M_N_est_82_m
XP_0_82_est_m=rowSums(A_D_N_est_82_m)+F_D_N_est_82_m[,"Final_Tot"]-XPB_resout
check_82=XP_0_82_est_m-colSums(A_T_N_est_82_m)-colSums(V_N_est_82_m)-XPB_resin
check_82
print ("max (abs(Total output_est-Total input_est)) in 82 industries")
print (max(abs(check_82)))
source('D:/GTAPK_R/Agg/NIO_Est_agg.r')
source('~/.active-rstudio-document')
source('C:/Users/sungw/OneDrive/work_2015/0000_Hybrid_2nd/CGE/GTAPK_R/Agg/IOT/IOimport.r')
View(Emit_Dir0)
View(Emit_Dir0)
View(Emit_Dir0_FinD)
View(Emit_Dir0_FinD)
View(Emit_Prcs)
View(Emit_Prcs)
source(file.path("Agg/IOT")"Dataload.r")
source(file.path("Agg/IOT"),"Dataload.r")
source("Agg/IOT"/"Dataload.r")
source("Agg/IOT/Dataload.r")
source("Agg/IOT/IOimport.r")
source("Energy_Estimation/EnergyIO.r")
source("Emission_Estimation/GHG_fuel.r")
source("Emissions_Estimation/GHG_fuel.r")
source('~/.active-rstudio-document')
View(Emit_Dir0)
View(Emit_Dir0)
View(Emit_Dir0_FinD)
View(Emit_Dir0_FinD)
View(IOT_E_GHG)
View(IOT_energy_FinD)
View(IOT_energy_FinD_Pc)
View(IOT_energy_FinD)
source('C:/Users/sungw/OneDrive/work_2016/0000_Hybrid_2nd/GTAP_K_R/GTAP_K_R.r')
source('C:/Users/sungw/OneDrive/work_2016/0000_Hybrid_2nd/GTAP_K_R/GTAP_K_R.r')
t=2010
paste(paste("GHG_IO",t,sep="_"),"csv",sep=".")
write.csv(Emit_Dir0, file=paste(paste("GHG_IO",t,sep="_"),"csv",sep="."))
write.csv(Emit_Dir0, file=paste(paste("GIO",t,sep="_"),"csv",sep="."))
write.csv(Emit_Dir_FinD, file=paste(paste("GIO_FD",t,sep="_"),"csv",sep="."))
write.csv(IOT_energy,file=paste(paste("EIO",t,sep="_"),"csv",sep="."))
write.csv(IOT_energy_FinD,file=paste(paste("EIO_FD",t,sep="_"),"csv",sep="."))
rownames(Emit_Dir0)
colnames(Emit_Dir_FinD)
Emit_Dir_FinD
Emit_Dir0_FinD
rownames(IOT_energy)
rownames(IOT_energy_FinD)
colnames(Emit_Dir0)
Emit_Dir0$rindex=rownames(Emit_Dir0)
Emit_Dir0_FinD$rindex=rownames(Emit_Dir0_FinD)
Emit_m=merge(Emit_Dir0,Emit_Dri0_FinD, by=rindex, all=T)
Emit_m=merge(Emit_Dir0,Emit_Dir0_FinD, by=rindex, all=T)
Emit_Dir0$rindex=rownames(Emit_Dir0)
Emit_Dir0_FinD$rindex=rownames(Emit_Dir0_FinD)
Emit_m=merge(Emit_Dir0,Emit_Dir0_FinD, by=rindex, all=T)
head(Emit_Dir0)
head(Emit_Dir0_FinD)
Emit_m=merge(Emit_Dir0,Emit_Dir0_FinD, by=rindex, all=T)
help(merge)
Emit_m=merge(Emit_Dir0,Emit_Dir0_FinD, by="rindex", all=T)
head(Emit_m)
rownames(Emit_m)
rownames(Emit_m)=rownames(Emit_Dir0)
rownames(Emit_m)
dim(Emit_Dir0)
dim(Emit_m)
Emit_m[,386:392]
Emit_m[,-c(1,(dim(Emit_Dir0)[2]+1):(dim(Emit_m)[2]-1))]
colnames(Emit_m)=c("sector",1:384,"HE")
head(Emit_m)
#IOimport
source("Agg/IOT/Dataload.r")
source("Agg/IOT/IOimport.r")
source("Energy_Estimation/EnergyIO.r")
source("Emissions_Estimation/GHG_fuel.r")
source("Emissions_Estimation/GHG_proc.r")
t=2010
#Merge Emit_Dir0 and Emit_Dir0_FinD
Emit_Dir0$rindex=rownames(Emit_Dir0)
Emit_Dir0_FinD$rindex=rownames(Emit_Dir0_FinD)
Emit_m=merge(Emit_Dir0,Emit_Dir0_FinD, by="rindex", all=T)
rownames(Emit_m)=rownames(Emit_Dir0)
Emit_m=Emit_m[,-c(1,(dim(Emit_Dir0)[2]+1):(dim(Emit_m)[2]-1))]
head(Emit_m)
Emit_m=merge(Emit_Dir0,Emit_Dir0_FinD, by="rindex", all=T)
rownames(Emit_m)=rownames(Emit_Dir0)
Emit_m=Emit_m[,-c(1,(dim(Emit_Dir0)[2]+2):(dim(Emit_m)[2]))]
head(Emit_m)
colnames(Emit_m)=c(1:384,"HE")
head(Emit_m)
source('C:/Users/sungw/OneDrive/work_2016/0000_Hybrid_2nd/GTAP_K_R/GTAP_K_R.r')
Emit_Prcs
source('C:/Users/sungw/OneDrive/work_2016/0000_Hybrid_2nd/GTAP_K_R/GTAP_K_R.r')
G_ind=read.csv(file="GIO_2010.csv",header=T)
head(G_ind)
G_ind=read.csv(file="GIO_2010.csv",header=T,as.is=T)
str(G_ind)
help(?"substring")
help("substring")
nchar(G_ind[,1])
substr(G_ind[,1],2,nchar(G_ind[,1]))
as.numeric(substr(G_ind[,1],2,nchar(G_ind[,1])))
G_ind[,1]=as.numeric(substr(G_ind[,1],2,nchar(G_ind[,1])))
head(G_ind)
as.numeric(substr(colnames(G_ind),2,nchar(colnames(G_ind))))
as.numeric(substr(colnames(G_ind[,-1]),2,nchar(colnames(G_ind[-1,]))))
substr(colnames(G_ind[,-1]),2,nchar(colnames(G_ind[-1,])))
colnames(G_ind[,-1])
substr(colnames(G_ind[,-1]),2,nchar(colnames(G_ind[,-1])))
as.numeric(substr(colnames(G_ind[,-1]),2,nchar(colnames(G_ind[,-1]))))
c("sector",as.numeric(substr(colnames(G_ind[,-1]),2,nchar(colnames(G_ind[,-1])))))
G_ind=read.csv(file="GIO_2010.csv",header=T,as.is=T)
colnames(G_ind)
help("read.csv")
G_ind[,1]=as.numeric(substr(G_ind[,1],2,nchar(G_ind[,1])))
head(G_ind)
colnames(G_ind)[1]="sector"
head(G_ind)
G_fd=read.csv(file="GIO_FD_2010.csv",header=T,as.is=T)
G_fd
GHG_IO_F=GHG_IO[,colnames(GHG_IO)=="Final_Pc"]
GHG_IO_F=GHG_IO[,colnames(G_fd)=="Final_Pc"]
GHG_IO_F=G_fd[,colnames(G_fd)=="Final_Pc"]
GHG_IO_F
source('C:/Users/sungw/OneDrive/work_2016/0000_Hybrid_2nd/GTAP_K_R/Agg/IOT/GHGIO_refining.r')
head(GHG_IO_ind)
GHG_IO_F
GHG_IO_ind=read.csv(file="GIO_2010.csv",header=T,as.is=T)
GHG_IO_ind[,1]=as.numeric(substr(GHG_IO_ind[,1],2,nchar(GHG_IO_ind[,1])))
colnames(GHG_IO_ind)[1]="sector"
G_fd=read.csv(file="GIO_FD_2010.csv",header=T,as.is=T)
GHG_IO_F=G_fd[,colnames(G_fd)=="Final_Pc"]
#load index mapping
sector_ind=read.csv(file="indcode_auto.csv",header=T, as.is=T)
#(ii)preparing index
row_ind=sector_ind[,1:2]
col_ind=sector_ind[,3:4]
sec_group=sector_ind[,5:8]
sec_Auto=sector_ind[,c(5,6,15,16)]
IOind_model=row_ind[(1:384),]
sec_group=sec_group[!is.na(sec_group[,1]),]
sec_Auto=sec_Auto[!is.na(sec_Auto[,1]),]
##(iii) preparing sector numbers
nsector=dim(sec_group)[1]
ngroup=length(unique(sec_group[,3]))
nAuto=length(unique(sec_Auto[,3]))
help(load)
load("IO_E_G2_2010.Rdata")
Emit_Prcs
write.csv(Emit_Prcs,file="GHG_p_2010.csv")
#execution
source("Agg/IOT/Dataload.r")#load IO (csv=> rdata)
source("Agg/IOT/IOimport.r")#Add names/construct scrap in  scrap out
source("Energy_Estimation/EnergyIO.r")# Energy IO
source("Emissions_Estimation/GHG_fuel.r") #GHG IO: fuel use
source("Emissions_Estimation/GHG_proc.r") #GHG IO: process
t=2010
write.csv(Emit_Dir0, file=paste(paste("GIO",t,sep="_"),"csv",sep="."))
write.csv(Emit_Dir0_FinD, file=paste(paste("GIO_FD",t,sep="_"),"csv",sep="."))
write.csv(Emit_Prcs,file=paste(paste("GHG_pa",t,sep="_"),"csv",sep="."))
write.csv(IOT_energy,file=paste(paste("EIO",t,sep="_"),"csv",sep="."))
write.csv(IOT_energy_FinD,file=paste(paste("EIO_FD",t,sep="_"),"csv",sep="."))
head(Emit_Dir0)
sum(Emit_Dir0)
sum(Emit_Dir0_FinD)
sum(Emit_Prcs)
head(Emit_Prcs)
head(Emit_Prcs[,-1])
sum(Emit_Prcs[,-1])
sum(Emit_Dir0)+sum(Emit_Dir0_FinD)+sum(Emit_Prcs[,-1])
sum(Emit_Dir0)+(sum(Emit_Dir0_FinD)/2)+sum(Emit_Prcs[,-1])
(49205.3+115821.5)*1000
source('C:/Users/sungw/OneDrive/work_2016/0000_Hybrid_2nd/CGE/SAM/samconst_pos_20160621.r')
source('C:/Users/sungw/OneDrive/work_2016/0000_Hybrid_2nd/CGE/SAM/samconst_pos_20160621.r')

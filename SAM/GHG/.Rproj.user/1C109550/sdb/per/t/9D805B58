{
    "contents" : "######### Part A. preparation\n#(i)load GHG data\nGHG_IO_ind=read.csv(file=\"C:/Users/sungw/OneDrive/work_2016/0000_Hybrid_2nd/GTAP_K_R/GIO_2010.csv\",header=T, as.is=T)\nGHG_IO_F=read.csv(file=\"C:/Users/sungw/OneDrive/work_2016/0000_Hybrid_2nd/GTAP_K_R/GIO_FD_2010.csv\",header=T, as.is=T)\n\n#load index mapping\nsector_ind=read.csv(file=\"C:/Users/sungw/OneDrive/work_2016/0000_Hybrid_2nd/Industry/DATA/IND/indcode_20160621.csv\",header=T, as.is=T)\nsec_BR=read.csv(file=\"C:/Users/sungw/OneDrive/work_2016/0000_Hybrid_2nd/Industry/DATA/IO/sector_BR.csv\",header=T, as.is=T)\nsec_BR=sec_BR[,-1]\n#(ii)preparing index\n\nrow_ind=sector_ind[,c(1,3)]\ncol_ind=sector_ind[,c(4,6)]\nsec_dict=sector_ind[,7:8]\n\nIOind_model=row_ind[(1:384),]\n\nsec_dict=sec_dict[!is.na(sec_dict[,1]),]\n##(iii) preparing sector numbers\nnsector=dim(sec_dict)[1]\nnBR=length(unique(sec_BR[,3]))\n\n## (iv) sector dictionary\nBR_dict=unique(sec_BR[,3:4])\n\n###### Part B. GHG_ind\n### I. IO to model\n## Step 1. get dimmension of IO\ndim_GHG_IO_ind=dim(GHG_IO_ind)\n\n## Step 2. Rowsum:  merge and obtain rowsum using aggregate function\nGHG_IO_ind$sector=as.numeric(substr(GHG_IO_ind$X,2,nchar(GHG_IO_ind$X)))\n\nGHG_sec=merge(GHG_IO_ind,IOind_model, by.x=\"sector\", by.y=\"basecode_row\", all.x=T)\nGHG_row_model=aggregate(GHG_sec[,3:(dim_GHG_IO_ind[2]+1)],list(GHG_sec$sector_row),FUN=sum)\n\ndim_GHG_row_model=dim(GHG_row_model)\n## Step 3. Colsum: transpose rowsum, merge with IOind_model index matching, take rowsum using aggregate function\n#3-1. keep row index\nrowindex_model=GHG_row_model[,1]\n#3-2. transpose\nT_GHG_model=data.frame(t(GHG_row_model))\nT_GHG_model=T_GHG_model[-1,]\nT_GHG_model$xsec=rownames(T_GHG_model)#preparing merging index\n\n#3-3. merge\nIOind_model$xsec=paste(\"X\",IOind_model[,1],sep=\"\")\nT_GHG_model_name=merge(T_GHG_model,IOind_model,by=\"xsec\",all.x=T,sort=F)\n\n#3-4. aggregate\n\nGHG_model_0=aggregate(T_GHG_model_name[,2:(dim_GHG_row_model[1]+1)],list(T_GHG_model_name$sector_row),FUN=sum)\nGHG_model_0=data.frame(t(GHG_model_0))\n\n## Step 4. set index for model IO\ncolindex_GHG_model=as.numeric(GHG_model_0[\"Group.1\",])\nrowindex_GHG_model=rowindex_model\n\n## Step 5.  keep only numeric values \nGHG_model_Ind=(GHG_model_0[-1,])\n## Step 6. Add row and column names\ncolnames(GHG_model_Ind)=sec_dict[colindex_GHG_model,2]\nrownames(GHG_model_Ind)=sec_dict[rowindex_GHG_model,2]\n\n### II. model to BR\n\n## Step 1. get dimmension of IO\n\ndim_GHG_model_Ind=dim(GHG_model_Ind)\n\n## Step 2. merge with BR index and aggregate by BR index\nGHG_model_BR=GHG_model_Ind\nGHG_model_BR$secname=rownames(GHG_model_BR)\nGHG_model_BRname=merge(GHG_model_BR, sec_BR, by.x=\"secname\", by.y=\"sector_name\", all.x=T,sort=F)\nGHG_row_BR=aggregate(GHG_model_BRname[,(2:(dim_GHG_model_Ind[2]+1))],list(GHG_model_BRname$BR_ind),FUN=sum)\n\ndim_GHG_row_BR=dim(GHG_row_BR)\n## Step 3. Colsum: transpose rowsum, merge with model_BR index matching, take rowsum using aggregate function\n#3-1. keep row index\nrowindex_BR=GHG_row_BR$Group.1\n#3-2. Transpose\nT_GHG_BR=data.frame(t(GHG_row_BR))\nT_GHG_BR=T_GHG_BR[-1,]\nT_GHG_BR$sec=rownames(T_GHG_BR)\n\n#3-3,merge with sec_BR index\n\nT_GHG_BR_name=merge(T_GHG_BR,sec_BR,by.x=\"sec\", by.y=\"sector_name\",all.x=T,sort=F)\n\n#3-4. aggregate\n\nGHG_BR_0=aggregate(T_GHG_BR_name[,2:(dim_GHG_row_BR[1]+1)],list(T_GHG_BR_name$BR_ind),FUN=sum)\nGHG_BR_0=data.frame(t(GHG_BR_0))\n\n## step 4. Obtain BR IO \n#4-1. row and column name index\ncolindex_BR=as.numeric(GHG_BR_0[\"Group.1\",])\nrowindex_BR=as.numeric(rowindex_BR)\n\n#4-2. keep data\nGHG_BR_ind=GHG_BR_0[-1,]\n\n#4-3 add names\n\ncolnames(GHG_BR_ind)=BR_dict[colindex_BR,2]\nrownames(GHG_BR_ind)=BR_dict[rowindex_BR,2]\n\n\n###### Part D. GHG_F\n\n##(i) model GHG_F\n# step 1. merge with model ind\nGHG_F_model=merge(GHG_IO_F,IOind_model, by.x=\"X\", by.y=\"xsec\",all.x=T,sort=F)\n\n# step 2. aggregate by \"sector_row(model variable)\"\n\nGHG_F_model=data.frame(aggregate(GHG_F_model[,\"Final_Pc\"],list(GHG_F_model[,\"sector_row\"]),FUN=sum))\n\n# step 3. obtain model F \nrownames(GHG_F_model)=sec_dict[GHG_F_model[,\"Group.1\"],2]\ncolnames(GHG_F_model)=c(\"model_ind\", \"Household\")\n\n\n##(ii) BR GHG_F\n#step 1. merge with BR ind\n\nGHG_F_BR=merge(GHG_F_model, sec_BR, by.x=\"model_ind\", by.y=\"sector_ind\", all.x=T, sort=F)\n\n\n# step 2. aggregate by \"BR_ind(BR variable)\"\n\n\nGHG_F_BR=data.frame(aggregate((GHG_F_BR[,\"Household\"]),list(GHG_F_BR[,\"BR_ind\"]),FUN=sum))\n\n# step 3. obtain BR F \nrownames(GHG_F_BR)=BR_dict[GHG_F_BR[,\"Group.1\"],2]\ncolnames(GHG_F_BR)=c(\"BR_ind\", \"Household\")\n\n\n############### Part D. merge IND and F\nGHG_model_Ind$rowindex=rownames(GHG_model_Ind)\nGHG_F_model$rowindex=rownames(GHG_F_model)\nGHG_F_model=GHG_F_model[-1]\nGHG_model=merge(GHG_model_Ind,GHG_F_model, by=\"rowindex\",all=T,sort=F)\nrownames(GHG_model)=GHG_model$rowindex\nGHG_model=GHG_model[,-1]\n\nGHG_BR_ind$rowindex=rownames(GHG_BR_ind)\nGHG_F_BR$rowindex=rownames(GHG_F_BR)\nGHG_F_BR=GHG_F_BR[,-1]\nGHG_BR=merge(GHG_BR_ind,GHG_F_BR,by=\"rowindex\",all=T,sort=F)\nrownames(GHG_BR)=GHG_BR$rowindex\nGHG_BR=GHG_BR[,-1]\n\n\n\n############### Part F. reduce size and add process\nGHG_model_p=GHG_model/100000 # in 100,000 ton\nGHG_BR_p=GHG_BR/100000\n\n\nghg_process=c(307.5602,1.4663,1.7777)#2014 National Greenhouse Gas Inventory Report of Korea p.399\nghg_process_ind=c(\"Cement\",\"Chemistry\",\"IS\")\nghg_process_model=t(data.frame((rep(0,dim(GHG_model_p)[2]))))\ncolnames(ghg_process_model)=colnames(GHG_model_p)\nrownames(ghg_process_model)=\"process\"\n\nghg_process_model[,match(ghg_process_ind,colnames(ghg_process_model))]=t(ghg_process)\n\nGHG_model_p=rbind(GHG_model_p,ghg_process_model)\nGHG_model_p$Total=rowSums(GHG_model_p)\nmodel_total_p=colSums(GHG_model_p)\nGHG_model_p=rbind(GHG_model_p,t(data.frame(model_total_p)))\nrownames(GHG_model_p)[dim(GHG_model_p)[1]]=\"Total\"\n\nghg_process_BR=t(data.frame((rep(0,dim(GHG_BR_p)[2]))))\ncolnames(ghg_process_BR)=colnames(GHG_BR_p)\nrownames(ghg_process_BR)=\"process\"\nghg_process_BR[1,]=0\nghg_process_BR[,\"EINT\"]=sum(ghg_process)\n\nGHG_BR_p=rbind(GHG_BR_p,ghg_process_BR)\nGHG_BR_p$Total=rowSums(GHG_BR_p)\nBR_total_p=colSums(GHG_BR_p)\nGHG_BR_p=rbind(GHG_BR_p,t(data.frame(BR_total_p)))\nrownames(GHG_BR_p)[dim(GHG_BR_p)[1]]=\"Total\"\n\n\n## change names used in GAMS coding: adding -a for activity, -c for commodity##\ncolnames(GHG_model_p)[1:nsector]=paste(colnames(GHG_model_p)[1:nsector],\"-a\",sep=\"\")\nNon_ind_r_model=is.na(match(rownames(GHG_model_p),c(\"process\",\"Total\")))\nrownames(GHG_model_p)[Non_ind_r_model]=paste(rownames(GHG_model_p)[Non_ind_r_model],\"-c\",sep=\"\")\n\ncolnames(GHG_BR_p)[1:nBR]=paste(colnames(GHG_BR_p)[1:nBR],\"-a\",sep=\"\")\nNon_ind_r_BR=is.na(match(rownames(GHG_BR_p),c(\"process\",\"Total\")))\nrownames(GHG_BR_p)[Non_ind_r_BR]=paste(rownames(GHG_BR_p)[Non_ind_r_BR],\"-c\",sep=\"\")\n\n\n## change column name HE to houseold\n\nwrite.csv(GHG_model_p, file=\"GHG_model_p_20160621.csv\")\nwrite.csv(GHG_BR_p,file=\"GHG_BR_p_20160621.csv\")\n",
    "created" : 1466502215887.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3505751173",
    "id" : "9D805B58",
    "lastKnownWriteTime" : 1466510072,
    "path" : "C:/Users/sungw/OneDrive/work_2016/0000_Hybrid_2nd/Industry/DATA/GHG/agg_ghg_20160621.r",
    "project_path" : "agg_ghg_20160621.r",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}
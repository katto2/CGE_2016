GHG_IO=read.csv(file="GHG_2010.csv",header=T, as.is=T)
GHG_IO=read.csv(file="GIO_2010.csv",header=T, as.is=T)
head(GHG_IO)
#(i)load GHG data
GHG_IO_ind=read.csv(file="GIO_2010.csv",header=T, as.is=T)
GHG_IO_F=read.csv(file="GIO_FD_2010.csv",header=T, as.is=T)
head(GHG_IO_F)
GHG_IO_F
sector_ind=read.csv(file="C:/Users/sungw/OneDrive/work_2016/0000_Hybrid_2nd/Industry/IND/indcode_20160621.csv",header=T, as.is=T)
sector_ind=read.csv(file="C:/Users/sungw/OneDrive/work_2016/0000_Hybrid_2nd/Industry/DATA/IND/indcode_20160621.csv",header=T, as.is=T)
row_ind=sector_ind[,c(1,3)]
col_ind=sector_ind[,c(4,6)]
sec_dict=sector_ind[,7:8]
#va_ind=sector_ind[,c(9,10)]
#fd_ind=sector_ind[,c(12,13)]
sec_BR=sector_ind[,c(7,8,15,16)]
IOind_model=row_ind[(1:384),]
sec_BR=sec_BR[!is.na(sec_BR[,1]),]
sec_dict=sec_dict[!is.na(sec_dict[,1]),]
sec_dict
nsector=dim(sec_dict)[1]
nsector
nBR=length(unique(sec_BR[,3]))
nBR
sector_BR=read.csv(file="C:/Users/sungw/OneDrive/work_2016/0000_Hybrid_2nd/Industry/DATA/IO/sector_BR.csv",header=T, as.is=T)
sector_BR
sec_BR=sec_BR[,-1]
sec_BR
sec_BR=read.csv(file="C:/Users/sungw/OneDrive/work_2016/0000_Hybrid_2nd/Industry/DATA/IO/sector_BR.csv",header=T, as.is=T)
str(sec_BR)
sec_BR[,-1]
sec_BR=sec_BR[,-1]
sec_BR
length(unique(sec_BR[,3]))
nBR=length(unique(sec_BR[,3]))
BR_dict=unique(sec_BR[,3:4])
BR_dict
sec_dict
dim_GHG_IO_ind=dim(GHG_IO_ind)
dim_GHG_IO_ind
colnames(GHG_IO_ind)
head(GHG_sec)
head(GHG_IO_ind)
IOind.model
IOind_model
GHG_IO_ind[,1]
help('substr')
nchar(GHG_IO_ind[,1])
substr(GHG_IO_ind$X,2,nchar(GHG_IO_ind$X))
as.numeric(substr(GHG_IO_ind$X,2,nchar(GHG_IO_ind$X)))
GHG_IO_ind$sector=as.numeric(substr(GHG_IO_ind$X,2,nchar(GHG_IO_ind$X)))
merge(GHG_IO_ind,IOind_model, by.x="sector", by.y="basecode_row", all.x=T)
GHG_sec=merge(GHG_IO_ind,IOind_model, by.x="sector", by.y="basecode_row", all.x=T)
GHG_row_model=aggregate(GHG_sec[,2:(dim_GHG_IO_ind[2])],list(GHG_sec$sector_row),FUN=sum)
colnames(GHG_sec[,2:(dim_GHG_IO_ind[2])])
colnames(GHG_sec[,3:(dim_GHG_IO_ind[2]+1)])
aggregate(GHG_sec[,3:(dim_GHG_IO_ind[2]+1)],list(GHG_sec$sector_row),FUN=sum)
GHG_row_model=aggregate(GHG_sec[,3:(dim_GHG_IO_ind[2]+1)],list(GHG_sec$sector_row),FUN=sum)
dim_GHG_row_model=dim(GHG_row_model)
dim_GHG_row_model
GHG_row_model[,1]
rowindex_model=GHG_row_model[,1]
T_GHG_model=data.frame(t(GHG_row_model))
head(T_GHG_model)
T_GHG_model=T_GHG_model[-1,]
T_GHG_model$xsec=rownames(T_GHG_model)#preparing merging index
head(T_GHG_model)
IOind_model$xsec=paste("X",IOind_model[,1],sep="")
head(IOind_model)
T_GHG_model_name=merge(T_GHG_model,IOind_model,by="xsec",all.x=T,sort=F)
head(T_GHG_model)
head(T_GHG_model_name)
GHG_model_0=aggregate(T_GHG_model_name[,2:(dim_GHG_row_model[1]+1)],list(T_GHG_model_name$sector_row),FUN=sum)
GHG_model_0=data.frame(t(GHG_model_0))
head(GHG_model_0)
colindex_GHG_model=as.numeric(GHG_model_0["Group.1",])
rowindex_GHG_model=rowindex_model
rowindex_GHG_model
colindex_GHG_model
## Step 5.  keep only numeric values and transpose
GHG_model_Ind=(GHG_model_0[-1,])
sec_dict[colindex_GHG_model,2]
sec_dict[rowindex_GHG_model,2]
colnames(GHG_model_Ind)=sec_dict[colindex_GHG_model,2]
rownames(GHG_model_Ind)=sec_dict[rowindex_GHG_model,2]
head(GHG_model_Ind)
dim_GHG_model_Ind=dim(GHG_model_Ind)
GHG_model_BR=GHG_model_Ind
GHG_model_BR$secname=rownames(GHG_model_BR)
head(GHG_model_BR)
head(sec_BR)
GHG_model_BRname=merge(GHG_model_BR, sec_BR, by.x="secname", by.y="sector_name", all.x=T,sort=F)
head(GHG_model_BRname)
GHG_model_BRname[,(2:(dim_GHG_model_Ind[2]+1))]
aggregate(GHG_model_BRname[,(2:(dim_GHG_model_Ind[2]+1))],list(GHG_model_BRname$BR_ind),FUN=sum)
dim_GHG_row_BR=dim(GHG_row_BR)
#3-1. keep row index
rowindex_BR=GHG_row_BR$Group.1
GHG_row_BR=aggregate(GHG_model_BRname[,(2:(dim_GHG_model_Ind[2]+1))],list(GHG_model_BRname$BR_ind),FUN=sum)
dim_GHG_row_BR=dim(GHG_row_BR)
rowindex_BR=GHG_row_BR$Group.1
T_GHG_BR=data.frame(t(GHG_row_BR))
T_GHG_BR=T_GHG_BR[-1,]
T_GHG_BR$sec=rownames(T_GHG_BR)
head(T_GHG_BR)
T_GHG_BR_name=merge(T_GHG_BR,sec_BR,by.x="sec", by.y="sector_name",all.x=T,sort=F)
GHG_BR_0=aggregate(T_GHG_BR_name[,2:(dim_GHG_row_BR[1]+1)],list(T_GHG_BR_name$BR_ind),FUN=sum)
GHG_BR_0=data.frame(t(GHG_BR_0))
GHG_BR_0
colindex_BR=as.numeric(GHG_BR_0["Group.1",])
rowindex_BR=as.numeric(rowindex_BR)
GHG_BR_ind=GHG_BR_0[-1,]
colnames(GHG_BR_ind)=BR_dict[colindex_BR,2]
rownames(GHG_BR_ind)=BR_dict[rowindex_BR,2]
GHG_BR_ind
sum(GHG_BR_ind)
sum(GHG_model_Ind)
GHG_IO$sector
GHG_IO_F
GHG_IO
as.numeric(substr(GHG_IO_F$X,2,nchar(GHG_IO_F$X)))
GHG_IO_F$sector=as.numeric(substr(GHG_IO_F$X,2,nchar(GHG_IO_F$X)))
GHG_IO_F
GHG_F_model=merge(GHG_IO_F,IOind_model, by.x="sector", by.y="basecode_row",all.x=T,sort=F)
head(GHG_F_model)
GHG_IO_F=read.csv(file="GIO_FD_2010.csv",header=T, as.is=T)
head(GHG_IO_F)
GHG_F_model=merge(GHG_IO_F,IOind_model, by.x="X", by.y="xsec",all.x=T,sort=F)
head(GHG_F_model)
tail(GHG_F_model)
GHG_F_model=data.frame(aggregate(GHG_F_model[,"Final_PC"],list(GHG_F_model[,"sector_row"]),FUN=sum))
GHG_F_model=data.frame(aggregate(GHG_F_model[,"Final_Pc"],list(GHG_F_model[,"sector_row"]),FUN=sum))
GHG_F_model
rownames(GHG_F_model)=sec_dict[GHG_F_model[,"Group.1"],2]
colnames(GHG_F_model)=c("model_ind", "Household")
GHG_F_model
GHG_F_BR=merge(GHG_F_model, sec_BR, by.x="model_ind", by.y="sector_ind", all.x=T, sort=F)
GHG_F_BR
sector_ind
sec_BR
head(sector_ind,n=10)
GHG_F_BR
GHG_F_BR=data.frame(aggregate((GHG_F_BR[,"HE"]),list(GHG_F_BR[,"BR_ind"]),FUN=sum))
GHG_F_BR=data.frame(aggregate((GHG_F_BR[,"Household"]),list(GHG_F_BR[,"BR_ind"]),FUN=sum))
GHG_F_BR
rownames(GHG_F_BR)=BR_dict[GHG_F_BR[,"Group.1"],2]
colnames(GHG_F_BR)=c("BR_ind", "Household")
GHG_F_BR
rownames(GHG_model_Ind)
GHG_model_Ind$rowindex=rownames(GHG_model_Ind)
rownames(GHG_F_model)
GHG_F_model$rowindex=rownames(GHG_F_model)
head(GHG_F_model)
GHG_F_model=GHG_F_model[-1]
GHG_model=merge(GHG_model_Ind,GHG_F_model, by="rowindex",all=T,sort=F)
rownames(GHG_model)=GHG_model$rowindex
GHG_model
GHG_model=GHG_model[,-1]
GHG_BR_ind$rowindex=rownames(GHG_BR_ind)
GHG_F_BR$rowindex=rownames(GHG_F_BR)
GHG_F_BR=GHG_F_BR[,-1]
GHG_BR=merge(GHG_BR_ind,GHG_F_BR,by="rowindex",all=T,sort=F)
rownames(GHG_BR)=GHG_BR$rowindex
GHG_BR=GHG_BR[,-1]
GHG_BR
GHG_model_p=GHG_model/100000 # in 100,000 ton
GHG_BR_p=GHG_BR/100000
GHG_model_p=GHG_model/100000 # in 100,000 ton
GHG_BR_p=GHG_BR/100000
GHG_model_p
sum(GHG_model_p)
sum(GHG_BR_p)
#(i)load GHG data
GHG_IO_ind=read.csv(file="GIO_2010.csv",header=T, as.is=T)
GHG_IO_F=read.csv(file="GIO_FD_2010.csv",header=T, as.is=T)
#load index mapping
sector_ind=read.csv(file="C:/Users/sungw/OneDrive/work_2016/0000_Hybrid_2nd/Industry/DATA/IND/indcode_20160621.csv",header=T, as.is=T)
sec_BR=read.csv(file="C:/Users/sungw/OneDrive/work_2016/0000_Hybrid_2nd/Industry/DATA/IO/sector_BR.csv",header=T, as.is=T)
sec_BR=sec_BR[,-1]
#(ii)preparing index
#(ii)preparing index
row_ind=sector_ind[,c(1,3)]
col_ind=sector_ind[,c(4,6)]
sec_dict=sector_ind[,7:8]
#va_ind=sector_ind[,c(9,10)]
#fd_ind=sector_ind[,c(12,13)]
#sec_BR=sector_ind[,c(7,8,15,16)]
IOind_model=row_ind[(1:384),]
#sec_BR=sec_BR[!is.na(sec_BR[,1]),]
sec_dict=sec_dict[!is.na(sec_dict[,1]),]
##(iii) preparing sector numbers
nsector=dim(sec_dict)[1]
#ngroup=length(unique(sec_group[,3]))
nBR=length(unique(sec_BR[,3]))
## (iv) sector dictionary
#sec_dict=sec_group[,1:2]
#group_dict=unique(sec_group[,3:4])
BR_dict=unique(sec_BR[,3:4])
###### Part B. GHG_ind
### I. IO to model
## Step 1. get dimmension of IO
dim_GHG_IO_ind=dim(GHG_IO_ind)
## Step 2. Rowsum:  merge and obtain rowsum using aggregate function
GHG_IO_ind$sector=as.numeric()
GHG_IO_ind$sector=as.numeric(substr(GHG_IO_ind$X,2,nchar(GHG_IO_ind$X)))
GHG_sec=merge(GHG_IO_ind,IOind_model, by.x="sector", by.y="basecode_row", all.x=T)
GHG_row_model=aggregate(GHG_sec[,3:(dim_GHG_IO_ind[2]+1)],list(GHG_sec$sector_row),FUN=sum)
dim_GHG_row_model=dim(GHG_row_model)
## Step 3. Colsum: transpose rowsum, merge with IOind_model index matching, take rowsum using aggregate function
#3-1. keep row index
rowindex_model=GHG_row_model[,1]
#3-2. transpose
T_GHG_model=data.frame(t(GHG_row_model))
T_GHG_model=T_GHG_model[-1,]
T_GHG_model$xsec=rownames(T_GHG_model)#preparing merging index
#3-3. merge
IOind_model$xsec=paste("X",IOind_model[,1],sep="")
T_GHG_model_name=merge(T_GHG_model,IOind_model,by="xsec",all.x=T,sort=F)
#3-4. aggregate
GHG_model_0=aggregate(T_GHG_model_name[,2:(dim_GHG_row_model[1]+1)],list(T_GHG_model_name$sector_row),FUN=sum)
GHG_model_0=data.frame(t(GHG_model_0))
## Step 4. set index for model IO
colindex_GHG_model=as.numeric(GHG_model_0["Group.1",])
rowindex_GHG_model=rowindex_model
## Step 5.  keep only numeric values
GHG_model_Ind=(GHG_model_0[-1,])
## Step 6. Add row and column names
colnames(GHG_model_Ind)=sec_dict[colindex_GHG_model,2]
rownames(GHG_model_Ind)=sec_dict[rowindex_GHG_model,2]
### II. model to BR
## Step 1. get dimmension of IO
dim_GHG_model_Ind=dim(GHG_model_Ind)
## Step 2. merge with BR index and aggregate by BR index
GHG_model_BR=GHG_model_Ind
GHG_model_BR$secname=rownames(GHG_model_BR)
GHG_model_BRname=merge(GHG_model_BR, sec_BR, by.x="secname", by.y="sector_name", all.x=T,sort=F)
GHG_row_BR=aggregate(GHG_model_BRname[,(2:(dim_GHG_model_Ind[2]+1))],list(GHG_model_BRname$BR_ind),FUN=sum)
dim_GHG_row_BR=dim(GHG_row_BR)
## Step 3. Colsum: transpose rowsum, merge with model_BR index matching, take rowsum using aggregate function
#3-1. keep row index
rowindex_BR=GHG_row_BR$Group.1
#3-2. Transpose
T_GHG_BR=data.frame(t(GHG_row_BR))
T_GHG_BR=T_GHG_BR[-1,]
T_GHG_BR$sec=rownames(T_GHG_BR)
#3-3,merge with sec_BR index
T_GHG_BR_name=merge(T_GHG_BR,sec_BR,by.x="sec", by.y="sector_name",all.x=T,sort=F)
#3-4. aggregate
GHG_BR_0=aggregate(T_GHG_BR_name[,2:(dim_GHG_row_BR[1]+1)],list(T_GHG_BR_name$BR_ind),FUN=sum)
GHG_BR_0=data.frame(t(GHG_BR_0))
## step 4. Obtain BR IO
#4-1. row and column name index
colindex_BR=as.numeric(GHG_BR_0["Group.1",])
rowindex_BR=as.numeric(rowindex_BR)
#4-2. keep data
GHG_BR_ind=GHG_BR_0[-1,]
#4-3 add names
colnames(GHG_BR_ind)=BR_dict[colindex_BR,2]
rownames(GHG_BR_ind)=BR_dict[rowindex_BR,2]
###### Part D. GHG_F
## (i) data preparation
#GHG_IO_F=data.frame(cbind(GHG_IO$sector,GHG_IO_F))
#colnames(GHG_IO_F)[1]=c("sector","HE")
#GHG_IO_F$sector=as.numeric(substr(GHG_IO_F$X,2,nchar(GHG_IO_F$X)))
##(ii) model GHG_F
# step 1. merge with model ind
GHG_F_model=merge(GHG_IO_F,IOind_model, by.x="X", by.y="xsec",all.x=T,sort=F)
# step 2. aggregate by "sector_row(model variable)"
GHG_F_model=data.frame(aggregate(GHG_F_model[,"Final_Pc"],list(GHG_F_model[,"sector_row"]),FUN=sum))
# step 3. obtain model F
rownames(GHG_F_model)=sec_dict[GHG_F_model[,"Group.1"],2]
colnames(GHG_F_model)=c("model_ind", "Household")
##(iii) BR GHG_F
#step 1. merge with BR ind
GHG_F_BR=merge(GHG_F_model, sec_BR, by.x="model_ind", by.y="sector_ind", all.x=T, sort=F)
# step 2. aggregate by "BR_ind(BR variable)"
GHG_F_BR=data.frame(aggregate((GHG_F_BR[,"Household"]),list(GHG_F_BR[,"BR_ind"]),FUN=sum))
# step 3. obtain BR F
rownames(GHG_F_BR)=BR_dict[GHG_F_BR[,"Group.1"],2]
colnames(GHG_F_BR)=c("BR_ind", "Household")
############### Part D. merge IND and F
GHG_model_Ind$rowindex=rownames(GHG_model_Ind)
GHG_F_model$rowindex=rownames(GHG_F_model)
GHG_F_model=GHG_F_model[-1]
GHG_model=merge(GHG_model_Ind,GHG_F_model, by="rowindex",all=T,sort=F)
rownames(GHG_model)=GHG_model$rowindex
GHG_model=GHG_model[,-1]
GHG_BR_ind$rowindex=rownames(GHG_BR_ind)
GHG_F_BR$rowindex=rownames(GHG_F_BR)
GHG_F_BR=GHG_F_BR[,-1]
GHG_BR=merge(GHG_BR_ind,GHG_F_BR,by="rowindex",all=T,sort=F)
rownames(GHG_BR)=GHG_BR$rowindex
GHG_BR=GHG_BR[,-1]
############### Part F. reduce size and add process
GHG_model_p=GHG_model/100000 # in 100,000 ton
GHG_BR_p=GHG_BR/100000
GHG_model_p
ghg_process=c(307.5602,1.4663,1.7777)#2014 National Greenhouse Gas Inventory Report of Korea p.399
ghg_process_ind=c("Cement","Chemistry","IS")
ghg_process_model=data.frame(rep(0,dim(GHG_model_p)[2]))
ghg_process_model
ghg_process_model=t(data.frame((rep(0,dim(GHG_model_p)[2])))
)
ghg_process_model
GHG_model_p
ghg_process_model=t(data.frame((rep(0,dim(GHG_model_p)[2]))))
colnames(ghg_process_model)=colnames(GHG_model_p)
rownames(ghg_process_model)="process"
ghg_pcocess_model
ghg_process_model
ghg_process_model[,match(ghg_process_ind,colnames(ghg_process_model))]=t(ghg_process)
ghg_process_model
GHG_model_p=rbind(GHG_model_p,ghg_process_model)
GHG_model_p
GHG_model_p$Total=rowSums(GHG_model_p)
GHG_model_p
model_total_p=colSums(GHG_model_p)
model_total_p
GHG_model_p=rbind(GHG_model_p,t(data.frame(model_total_p)))
GHG_model_p
rownames(GHG_model_p)[dim(GHG_model_p)[1]]="Total"
ghg_process_BR=t(data.frame((rep(0,dim(GHG_model_p)[2]))))
colnames(ghg_process_BR)=colnames(GHG_BR_p)
rownames(ghg_process_BR)="process"
ghg_process_BR=t(data.frame((rep(0,dim(GHG_BR_p)[2]))))
colnames(ghg_process_BR)=colnames(GHG_BR_p)
rownames(ghg_process_BR)="process"
ghg_process_BR[,"ENIT"]=sum(ghg_process)
ghg_process_BR[,"EINT"]=sum(ghg_process)
ghg_process_BR
GHG_BR_p=rbind(GHG_BR_p,ghg_process_BR)
GHG_BR_p$Total=rowSums(GHG_BR_p)
GHG_BR_p
BR_total_p=colSums(GHG_BR_p)
GHG_BR_p=rbind(GHG_BR_p,t(data.frame(BR_total_p)))
GHG_BR_p
rownames(GHG_BR_p)[dim(GHG_BR_p)[1]]="Total"
GHG_BR_p
colnames(GHG_model_p)[1:nsector]=paste(colnames(GHG_model_p)[1:nsector],"-a",sep="")
GHG_BR_p
GHG_model_p
Non_ind_r_model=is.na(match(rownames(GHG_model_p),c("process","Total")))
Non_ind_r_model
rownames(GHG_model_p)[Non_ind_r_model]=paste(rownames(GHG_model_p)[Non_ind_r_model],"-c",sep="")
GHG_model_p
colnames(GHG_BR_p)[1:nBR]=paste(colnames(GHG_BR_p)[1:nBR],"-a",sep="")
Non_ind_r_BR=is.na(match(rownames(GHG_BR_p),c("process","Total")))
rownames(GHG_BR_p)[Non_ind_r_BR]=paste(rownames(GHG_BR_p)[Non_ind_r_BR],"-c",sep="")
GHG_BR_p
write.csv(GHG_model_p, file="GHG_model_p_20160621.csv")
write.csv(GHG_BR_p,file="GHG_BR_p_20160621.csv")
source('C:/Users/sungw/OneDrive/work_2016/0000_Hybrid_2nd/Industry/DATA/GHG/agg_ghg_20160621.r')
source('C:/Users/sungw/OneDrive/work_2016/0000_Hybrid_2nd/Industry/DATA/GHG/agg_ghg_20160621.r')
GHG_model_p
GHG_BR_p

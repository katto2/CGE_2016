{
    "contents" : "## From June.21.2016, we drop 'Group' integration. We have not used it for over a year. \n\n## Step 1. Data preperation\n#(i) loading\n#load IO data\nIOT_b=read.csv(file=\"./IO/IOT_b.csv\",header=T, as.is=T)\n#load index mapping\nsector_ind=read.csv(file=\"./IND/indcode_20160621.csv\",header=T, as.is=T)\n\n\n#(ii)preparing index\nrow_ind=sector_ind[,c(1,3)]\ncol_ind=sector_ind[,c(4,6)]\nsec_dict=sector_ind[,7:8]\nva_ind=sector_ind[,c(9,10)]\nfd_ind=sector_ind[,c(12,13)]\nsec_BR=sector_ind[,c(7,8,15,16)]\n#getting rid of NA \nrow_ind=row_ind[!is.na(row_ind[,1]),]\nsec_dict=sec_dict[!is.na(sec_dict[,1]),]\nsec_BR=sec_BR[!is.na(sec_BR[,1]),]\nva_ind=va_ind[!is.na(va_ind[,1]),]\nfd_ind=fd_ind[!is.na(fd_ind[,1]),]\n\nnsector=length(unique((sec_dict[,1])))\n#nBR=length(unique(sec_BR[,3]))\nnva=dim(va_ind)[1]\nnfd=dim(fd_ind)[1]\n\n#(iii)preparing IO for merging with mapping\n#set NA observations in IO as 0 \nIOT_b[is.na(IOT_b)]=0\n#add row index to be used in merging with mapping data to IO\nIOT_b$basecode_row=IOT_b$X\n#get dimmension of IO\ndim_IOT_b=dim(IOT_b)\n\n## Step 2. Rowsum:  merge and obtain rowsum using aggregate function\nIOT_b_sec=merge(IOT_b,row_ind, by=\"basecode_row\", all=T)\nIOT_b_model=aggregate(IOT_b_sec[,4:(dim_IOT_b[2])],list(IOT_b_sec$sector_row),FUN=sum)\n\n## Step 3. Column sum\n#(i) Traspose rowsum \nT_IOT_b_model=data.frame(t(IOT_b_model))\n#(ii) add column names for transposed data\ncolnames(T_IOT_b_model)[1:nsector]=sec_dict[(1:nsector),2]\ncolnames(T_IOT_b_model)[(nsector+1):(nsector+nva)]=va_ind[,2]\n#(iii) drop Group indicator used in rowsum\nT_IOT_b_model=T_IOT_b_model[-1,]\n#(iv) add index to be used in column sum \nT_IOT_b_model$basecode_col=col_ind[,2]\n#(v) take column sum using aggregate function\nT_IOT_model_col=aggregate(T_IOT_b_model[,1:(nsector+nva)],list(T_IOT_b_model$basecode_col),FUN=sum)\n\n## Step 4. obtain IO table\n#(i)obtain transpose of column sum\nIOT_model=data.frame(t(T_IOT_model_col))\n#(ii) add column names\ncolnames(IOT_model)[1:nsector]=sec_dict[(1:nsector),2]\ncolnames(IOT_model)[(nsector+1):(nsector+nfd)]=fd_ind[,2]\n#(iii) drop aggregatio indicator\nIOT_model=IOT_model[-1,]\n\n#Step 5. checking balance\n# total input + Resout = Total Demand\ncheck1=as.numeric(IOT_model[\"Tinput\",(1:nsector)])+IOT_model$Resout[(1:nsector)]+IOT_model$Imp[(1:nsector)]-IOT_model$Dtotal[(1:nsector)]\ncheck2=IOT_model$Qtotal[(1:nsector)]+IOT_model$Qself[(1:nsector)]+IOT_model$Resout[(1:nsector)]+IOT_model$Imp[(1:nsector)]-IOT_model$Dtotal[(1:nsector)]\ncheck1\ncheck2\n\nwrite.csv(IOT_model, file=\"IO_model.csv\")\n\n#determine energy intensive sector\n\nlibrary(dplyr)\nlibrary(tidyr)\nEnergy_indicator_row=sector_ind$Energy.IND[1:(dim(IOT_model)[1])]\nEnergy_indicator_col=sector_ind$Energy.IND[1:(dim(IOT_model)[2])]\n\nEnergy=rownames(IOT_model)[Energy_indicator_row==\"Energy\"]\nInd=colnames(IOT_model)[Energy_indicator_col==\"IND\"]\nEnergy_Ind=IOT_model[match(Energy,rownames(IOT_model)),match(Ind,colnames(IOT_model))]\nTinput_Ind=IOT_model[\"Tinput\",match(Ind,colnames(IOT_model))]\nEinputshare=data.frame(t(colSums(Energy_Ind)/Tinput_Ind))\nEindshare=data.frame(colSums(Energy_Ind)/sum(Energy_Ind))\nE_share=cbind(Einputshare,Eindshare)\ncolnames(E_share)=c(\"E/Input\",\"E/TotalE\")\nE_share=E_share[order(E_share[,1],decreasing=TRUE),]\nE_share$dist=cumsum(E_share[,2])\nEINT=rownames(E_share)[E_share$dist<0.56] #Ind with highest Energy input/Total input, up to 55% total energy cost.\nNEINT=setdiff(Ind,EINT)\n\n## Boehringer and Rutherford Toy model secter index\n# Originally, BR has 6 sectors Elec, OIL, COAL, GAS, X(energy intensive),Y(non energy intensive)\n# We separage agriculture to link with agriculutre bottom up model. That makes our sectors seven sectors\n# ELEC, OIL, COAL,GASHEAT,EINT,NEINT,AGRI\n# GAS and Heat are bundled as GASHEAT, ROIL and OIL are interageted into OIL\n\n#step 0. modify sec_BR to have EINT and NEINT\nsec_BR$BR_name[intersect(match(EINT,sec_BR[,2]),which(sec_BR[,4]==\"IND\"))]=\"EINT\"\nsec_BR$BR_ind[sec_BR$BR_name==\"IND\"]=6\nsec_BR$BR_name[sec_BR$BR_name==\"IND\"]=\"NEINT\"\n\n\n\n#Step.1 Preparing data\n#(i)set aside industry data IOT_model\nIOT_model_BR=IOT_model\n#(ii)preparing index to sort after merging\nIOT_model_BR$index=(1:(dim(IOT_model)[1]))\n#(iii)preparing index to merge with sector-group mapping\nIOT_model_BR$sector=rownames(IOT_model_BR)\n#(iv) merge with sector-BR index mapping and sort to original order\nIOT_model_BR=merge(IOT_model_BR,sec_BR, by.x=\"sector\", by.y=\"sector_name\", all=T)\nIOT_model_BR=IOT_model_BR[order(IOT_model_BR$index),]\n#(v) give row names\nrownames(IOT_model_BR)=IOT_model_BR$sector\n#(vi)preparing Group name and Group index to be used in aggregation. The VA part\nIOT_model_BR$BR_name[is.na(IOT_model_BR$BR_name)]=IOT_model_BR$sector[is.na(IOT_model_BR$BR_name)]\n\nBRimax=max(IOT_model_BR$BR_ind,na.rm=T)\nBRiblank=length(IOT_model_BR$BR_ind[is.na(IOT_model_BR$BR_ind)])\n\nIOT_model_BR$BR_ind[is.na(IOT_model_BR$BR_ind)]=((BRimax+1):(BRimax+BRiblank))\n\n#step 2. rowsum by aggregate function: take row sum\nIOT_BR_row=aggregate(IOT_model_BR[,2:(nsector+nfd+1)],list(IOT_model_BR$BR_ind),FUN=sum)\n\n#step 3. prepare for column sum\n#(i)add group name and index to rowsum data \n## (i-1) prepare BR_name and index to add to rowsum data b/c character vector with group name was excluded in aggregation\nBR_ind=data.frame(unique(cbind(IOT_model_BR$BR_ind,IOT_model_BR$BR_name)))\ncolnames(BR_ind)=c(\"BR_ind\",\"BR_name\")\n##(i-2) add BR_name and change rowname\nIOT_BR_row=merge(IOT_BR_row, BR_ind, by.x=\"Group.1\", by.y=\"BR_ind\", all=T)\nrownames(IOT_BR_row)=IOT_BR_row$BR_name\n##(i-3) getting rid of aggregate group indicator (1st variable) and Group_name variable, so thea we can apply aggregate function \nIOT_BR_row=IOT_BR_row[,-1*c(1, dim(IOT_BR_row)[2])]\n##(i-4)Transpose\nT_IOT_BR_row=data.frame(t(IOT_BR_row))\n\n#step 4. colsum by aggregate function\n#(i) prepare to merge with mapping index\n##(i-1) prepare merging varible to merge with sector_group mapping\nT_IOT_BR_row$sector=rownames(T_IOT_BR_row)\n##(i-2) prepare index varible to sort after merging\nT_IOT_BR_row$index=(1:dim(T_IOT_BR_row)[1])\n##(i-3) merge with sector_BR mapping\nT_IOT_BR_row=merge(T_IOT_BR_row,sec_BR, by.x=\"sector\", by.y=\"sector_name\", all=T,sort=F)\n##(i-4) sort merged data to 'before-merge' order\nT_IOT_BR_row=T_IOT_BR_row[order(T_IOT_BR_row$index),]\n##(i-5) give rownames\nrownames(T_IOT_BR_row)=T_IOT_BR_row$sector\n\n\n#(ii) prepare variable for colum sum aggregation: prepare BR name and BR index to use in aggregate funciton\n## Group name =Group name + Final demand elements\nT_IOT_BR_row$BR_name[is.na(T_IOT_BR_row$BR_name)]=T_IOT_BR_row$sector[is.na(T_IOT_BR_row$BR_name)]\nBRimax2=max(T_IOT_BR_row$BR_ind,na.rm=T)\nBRiblank2=length(T_IOT_BR_row$BR_ind[is.na(T_IOT_BR_row$BR_ind)])\nT_IOT_BR_row$BR_ind[is.na(T_IOT_BR_row$BR_ind)]=((BRimax2+1):(BRimax2+BRiblank2))\n#ngroup=8\nnBR=7\n#(iii) column sum by aggregate function\nT_IOT_BR=aggregate(T_IOT_BR_row[,2:(nBR+nva+1)],list(T_IOT_BR_row$BR_ind),FUN=sum)\n\n\n#step 5. management after aggregation\n#(i) add row names to aggregated data\n##(i-1) prepare row names =BR name + final demand elements\nBR_ind_name=data.frame(unique(cbind(T_IOT_BR_row$BR_ind,T_IOT_BR_row$BR_name)))\ncolnames(BR_ind_name)=c(\"BR_ind\",\"BR_name\")\n##(i-2) merge row name data\nT_IOT_BR=merge(T_IOT_BR, BR_ind_name, by.x=\"Group.1\", by.y=\"BR_ind\", all=T)\n##(i-3) change row name\nrownames(T_IOT_BR)=T_IOT_BR$BR_name\n#(ii) Take transpose again to obtain BR IO data\nIOT_BR=data.frame(t(T_IOT_BR[,-1*c(1,dim(T_IOT_BR)[2])]))\n\n#checking balance\n# total input + Resout = Total Demand\ncheck5=as.numeric(IOT_BR[\"Tinput\",(1:nBR)])+IOT_BR$Resout[(1:nBR)]+IOT_BR$Imp[(1:nBR)]-IOT_BR$Dtotal[(1:nBR)]\ncheck6=IOT_BR$Qtotal[(1:nBR)]+IOT_BR$Qself[(1:nBR)]+IOT_BR$Resout[(1:nBR)]+IOT_BR$Imp[(1:nBR)]-IOT_BR$Dtotal[(1:nBR)]\ncheck5\ncheck6\nwrite.csv(sec_BR,file=\"sector_BR.csv\")\nwrite.csv(IOT_BR, file=\"IO_BR.csv\")",
    "created" : 1469016047149.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4217331377",
    "id" : "E6DD2DE4",
    "lastKnownWriteTime" : 1466511077,
    "path" : "C:/Users/sungw/OneDrive/work_2016/0000_Hybrid_2nd/CGE/SAM/IO/agg_20160621.r",
    "project_path" : "IO/agg_20160621.r",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}